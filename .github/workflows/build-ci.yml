name: Build and Deploy

on: workflow_dispatch
  
permissions:
  checks: write
  

jobs:
  demo_app_authentication:
    runs-on: ubuntu-latest
    steps:
      - name: Generate a token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.PRIVATEKEY }}

      - name: Use the token
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          gh api octocat
  build_and_test:
    runs-on: ubuntu-latest
    needs: demo_app_authentication

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
          fetch-depth: 0
          token: ${{ secrets.CODEGITHUB_TOKEN }}

    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Build and test with Maven
      run: |
       mvn spring-javaformat:apply
       mvn -B package -Pcoverage
      

    - name: Upload JAR artifact
      uses: actions/upload-artifact@v2
      with:
        name: app-jar
        path: target/*.jar

    - name: Generate JaCoCo badge
      id: jacoco
      uses: cicirello/jacoco-badge-generator@v2
      with:
        badges-directory: badges
        generate-branches-badge: true
        generate-summary: true

    - name: Log coverage percentages to workflow output
      run: |
        echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
        echo "branches = ${{ steps.jacoco.outputs.branches }}"

    - name: Upload JaCoCo coverage report as a workflow artifact
      uses: actions/upload-artifact@v3
      with:
        name: jacoco-report
        path: target/site/jacoco/


    - name: Comment on PR with coverage percentages
      if: ${{ github.event_name == 'pull_request' }}
      run: |
        REPORT=$(<badges/coverage-summary.json)
        COVERAGE=$(jq -r '.coverage' <<< "$REPORT")%
        BRANCHES=$(jq -r '.branches' <<< "$REPORT")%
        NEWLINE=$'\n'
        BODY="## JaCoCo Test Coverage Summary Statistics${NEWLINE}* __Coverage:__ ${COVERAGE}${NEWLINE}* __Branches:__ ${BRANCHES}"
        gh pr comment ${{github.event.pull_request.number}} -b "${BODY}"
      continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Get the Coverage info
      run: |
        echo "Total coverage ${{ steps.jacoco.outputs.coverage-overall }}"
        echo "Changed Files coverage ${{ steps.jacoco.outputs.coverage-changed-files }}"

    # - name: sast-scan
    #   uses: AppThreat/sast-scan-action@1.0.2
    #   with:
    #     src:  
    #     output:  
    #     type: java
SAST:
    runs-on: ubuntu-latest
    needs: build_and_test

    steps:
    - name: sast-scan
      uses: AppThreat/sast-scan-action@1.0.2
      # with:
      #   src:  
      #   output:  
      #   type: java
          

 
     
    

    # - name: Run tests and generate Jacoco report
    #   run: |
    #     mvn spring-javaformat:apply
    #     mvn test verify jacoco:report

    # - name: Copy Coverage To Predictable Location
    #   run: |
    #     cp target/*/jacoco/jacoco.xml target/site/jacoco.xml
    #     pwd
    #     ls
        
    # - name: JaCoCo Code Coverage Report
    #   id: jacoco_reporter
    #   uses: PavanMudigonda/jacoco-reporter@v5.0
    #   with:
    #       coverage_results_path: 'target/site/jacoco/jacoco.xml'
    #       coverage_report_name: Coverage
    #       coverage_report_title: JaCoCo
    #       github_token: ${{ secrets.GH_TOKEN }}
    #       skip_check_run: false
    #       minimum_coverage: 80
    #       fail_below_threshold: false
    #       publish_only_summary: false 
          
    # - name: Report jacoco_reporter Conclusion
    #   if: always()
    #   uses: dflydev/check-runs-action@v1
    #   with:
    #       token: ${{ secrets.GH_TOKEN }}
    #       id: jacoco_reporter
    #       conclusion: ${{ steps.jacoco_reporter.outcome }}

    # - name: Add Coverage Job Summary
    #   run: echo "${{ steps.jacoco_reporter.outputs.coverageSummary }}" >> $GITHUB_STEP_SUMMARY
          
    # - name: Upload Code Coverage Artifacts
    #   uses: actions/upload-artifact@v2
    #   with:
    #       name: code-coverage-report-markdown
    #       path: '**/coverage-results.md'
    #       retention-days: 1  

  docker-build:
    runs-on: ubuntu-latest
    needs: build_and_test
    

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
          fetch-depth: 0
          token: ${{ secrets.CODEGITHUB_TOKEN }}

    - name: Download JAR artifact
      uses: actions/download-artifact@v2
      with:
        name: app-jar
        path: target/*.jar

    - name: docker login
      uses: docker/login-action@v1
      with:
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ruth99/github-actions-pet-clinic:${{ github.sha }}
          
          
        

  
